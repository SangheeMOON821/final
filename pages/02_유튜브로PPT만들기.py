import streamlit as st
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from youtube_transcript_api._errors import RequestBlocked
from pptx import Presentation
from pptx.util import Inches
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import openai
import re
import tempfile
import os
from dotenv import load_dotenv  # ‚úÖ dotenv Ï∂îÍ∞Ä

# ‚úÖ .env ÌååÏùº Î°úÎìú
load_dotenv()

# ‚úÖ ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú API ÌÇ§ Î∂àÎü¨Ïò§Í∏∞
YOUTUBE_API_KEY = os.getenv("AIzaSyCiOYEp0EsDCRl2xn5exfxpJyv78SJfIOQ")
openai.api_key = os.getenv("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")

# --------------------------------------
def extract_video_id(url):
    regex = r"(?:v=|\/)([0-9A-Za-z_-]{11}).*"
    match = re.search(regex, url)
    return match.group(1) if match else None

def get_transcript(video_id):
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        return " ".join([item["text"] for item in transcript])
    except TranscriptsDisabled:
        return None
    except RequestBlocked:
        return "BLOCKED"
    except Exception:
        return None

def get_video_metadata(video_id):
    try:
        youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)
        request = youtube.videos().list(part="snippet", id=video_id)
        response = request.execute()

        if not response["items"]:
            return None, None
        item = response["items"][0]["snippet"]
        return item["title"], item.get("description", "")
    except HttpError as e:
        st.error(f"[YouTube API Error] {e}")
        return None, None

def summarize_text(text, max_chars=800):
    sentences = text.split('. ')
    chunks = []
    current_chunk = ""
    for sentence in sentences:
        if len(current_chunk) + len(sentence) < max_chars:
            current_chunk += sentence + ". "
        else:
            chunks.append(current_chunk.strip())
            current_chunk = sentence + ". "
    if current_chunk:
        chunks.append(current_chunk.strip())
    return chunks

def summarize_with_gpt(text, lang="ko"):
    prompt = f"Îã§Ïùå Ïú†ÌäúÎ∏å ÏòÅÏÉÅ ÏÜåÍ∞ú ÎÇ¥Ïö©ÏùÑ Í∏∞Î∞òÏúºÎ°ú Ï£ºÏöî ÎÇ¥Ïö©ÏùÑ {lang}Î°ú Ïä¨ÎùºÏù¥ÎìúÏ≤òÎüº ÏöîÏïΩÌï¥Ï§ò:\n\n{text}\n\nÏöîÏïΩ:"
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=600,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"[GPT Error] {e}")
        return "GPT ÏöîÏïΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."

def create_ppt(youtube_url, title, summaries):
    prs = Presentation()

    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = title or "YouTube Summary Presentation"
    slide.placeholders[1].text = f"Link: {youtube_url}"

    content_layout = prs.slide_layouts[1]
    for idx, summary in enumerate(summaries, start=1):
        slide = prs.slides.add_slide(content_layout)
        slide.shapes.title.text = f"ÏöîÏïΩ {idx}"
        slide.placeholders[1].text = summary

    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pptx")
    prs.save(tmp_file.name)
    return tmp_file.name

# --------------------------------------
st.set_page_config(page_title="Ïú†ÌäúÎ∏å ÏöîÏïΩ PPT ÏÉùÏÑ±Í∏∞")
st.title("üéûÔ∏è Ïú†ÌäúÎ∏å ÏòÅÏÉÅ ÏöîÏïΩ PPT ÏÉùÏÑ±Í∏∞")

youtube_url = st.text_input("Ïú†ÌäúÎ∏å ÎßÅÌÅ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî")

if st.button("üìÑ PPT ÎßåÎì§Í∏∞"):
    if not youtube_url:
        st.warning("Ïú†ÌäúÎ∏å ÎßÅÌÅ¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
        st.stop()

    video_id = extract_video_id(youtube_url)
    if not video_id:
        st.error("Ïú†Ìö®Ìïú Ïú†ÌäúÎ∏å ÎßÅÌÅ¨Í∞Ä ÏïÑÎãôÎãàÎã§.")
        st.stop()

    with st.spinner("1Îã®Í≥Ñ: Ïú†ÌäúÎ∏å ÏòÅÏÉÅ Ï†ïÎ≥¥ ÌôïÏù∏ Ï§ë..."):
        title, description = get_video_metadata(video_id)
        if title is None:
            st.error("YouTube API ÏöîÏ≤≠ Ïã§Ìå® - API ÌÇ§ ÌôïÏù∏ ÎòêÎäî ÏòÅÏÉÅ Í∂åÌïú ÌôïÏù∏ ÌïÑÏöî.")
            st.stop()

    with st.spinner("2Îã®Í≥Ñ: ÏûêÎßâ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Îäî Ï§ë..."):
        transcript = get_transcript(video_id)

    if transcript == "BLOCKED" or transcript is None:
        st.warning("ÏûêÎßâÏù¥ ÏóÜÍ±∞ÎÇò Ï∞®Îã®ÎêòÏñ¥ GPTÎ°ú ÏöîÏïΩÌï©ÎãàÎã§.")
        if not description:
            st.error("ÏòÅÏÉÅ ÏÑ§Î™ÖÏù¥ ÏóÜÏñ¥ ÏöîÏïΩÏù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.")
            st.stop()
        with st.spinner("GPT ÏöîÏïΩ ÏÉùÏÑ± Ï§ë..."):
            summary_text = summarize_with_gpt(description)
            summaries = summary_text.split("\n")
    else:
        with st.spinner("ÏûêÎßâ Í∏∞Î∞ò ÏöîÏïΩ ÏÉùÏÑ± Ï§ë..."):
            summaries = summarize_text(transcript)

    with st.spinner("3Îã®Í≥Ñ: PPT ÏÉùÏÑ± Ï§ë..."):
        ppt_path = create_ppt(youtube_url, title, summaries)

    with open(ppt_path, "rb") as f:
        st.success("üéâ PPT ÏÉùÏÑ± ÏôÑÎ£å!")
        st.download_button(
            label="üì• PPT Îã§Ïö¥Î°úÎìú",
            data=f,
            file_name="youtube_summary.pptx",
            mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
        )

    os.remove(ppt_path)
